{"mappings":"YAAA,IAAMA,EAAYC,SAASC,eAAe,mBACpCC,EAAcF,SAASG,cAAc,sBAChCC,UAAU,mBAAoB,IACzCC,GAAe,GAGf,IAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EAQjBC,QAAS,SAAUC,GAEjBC,QAAQC,IAAI,oBAAqBF,EAAc,IAG/C,IAAMG,EAAYH,EAAc,GAMhC,GAHAC,QAAQC,IAAI,kBAAmBC,IA4CnC,SAAsBC,GACpBH,QAAQC,IAAI,+CACZD,QAAQC,IAAI,gBAAiB,IAAIL,MACjCI,QAAQC,IAAI,cAAe,IAAIL,KAAKO,IAEpC,IAAMC,EAAc,IAAIR,KAIlBS,EAHY,IAAIT,KAAKO,IAGGC,EAI9B,OAFAJ,QAAQC,IAAI,UAAWI,EAAW,cAAgB,aAE3CA,C,CAtDAC,CAAaJ,GAMhB,OAJAF,QAAQC,IAAI,wCAEZM,MAAM,sCAMRP,QAAQC,IAAI,+BAEZV,GAAe,E,GA6CnB,SAASA,EAAeiB,GAClBA,EACFpB,EAAYqB,aAAa,YAAY,GAErCrB,EAAYsB,gBAAgB,W,CAIhC,SAASC,EAAUC,GAEjB,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,CAAEE,KARIC,KAAKC,MAAMP,EAAKI,GAQdI,MANDF,KAAKC,MAAMP,EAAMI,EAAOD,GAMhBM,QAJNH,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,GAIlBS,QAFfJ,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAZnC,K,CAlDjBvB,UAAU,mBAAoBE,GAE9BJ,EAAYmC,iBAAiB,SAAS,WAIpC,IAEIC,EAFiB,IAAI5B,KAAKX,EAAUwC,OAAOC,UACzB9B,KAAK+B,MAG3BC,aAAY,WACVJ,GAAU,IACVxB,QAAQC,IAAI,YAAaU,EAAUa,G,GAClC,I","sources":["src/js/02-timer.js"],"sourcesContent":["const inputDate = document.getElementById('datetime-picker');\nconst buttonStart = document.querySelector('button[data-start]');\nconst fp = flatpickr('#datetime-picker', {}); // flatpickr\nbuttonDisabled(true);\n\n// Set up options for the flatpickr date picker\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  /**\n   * Callback function for when the date picker is closed.\n   * It checks if the selected date is in the future.\n   * If not, it displays an alert and prevents the button from being enabled.\n   **/\n\n  onClose: function (selectedDates) {\n    // Log the first selected date\n    console.log('selectedDates[0]:', selectedDates[0]);\n\n    // Get the input date value\n    const dateValue = selectedDates[0];\n\n    // Log the input date value\n    console.log('inputDateValue:', dateValue);\n\n    // Check if the input date is in the future\n    if (!isFutureDate(dateValue)) {\n      // Log that the input date is not in the future\n      console.log('Input date is not in the future');\n      // Display an alert to the user\n      alert('Please choose a date in the future');\n      // Prevent the button from being enabled\n      return;\n    }\n\n    // Log that the input date is in the future\n    console.log('Input date is in the future');\n    // Enable the button\n    buttonDisabled(false);\n  },\n};\n\n// Initialize the flatpickr date picker\nflatpickr('#datetime-picker', options);\n\nbuttonStart.addEventListener('click', () => {\n  // Convert the input value to a Date object\n  //const mstest = new Date(inputDate.value);\n\n  const futureDateMs = new Date(inputDate.value).getTime();\n  const currentDateMs = Date.now();\n  let ticker = futureDateMs - currentDateMs;\n\n  setInterval(() => {\n    ticker -= 1000;\n    console.log('tickerId:', convertMs(ticker));\n  }, 1000);\n});\n\n// functions\n\nfunction intervalId(ms) {\n  setInterval(() => {\n    convertMs(ms);\n  }, 1000);\n}\n\nfunction isFutureDate(date) {\n  console.log('Checking if the given date is in the future');\n  console.log('Current date:', new Date());\n  console.log('Given date:', new Date(date));\n\n  const currentDate = new Date();\n  const givenDate = new Date(date);\n\n  // Compare the given date with the current date\n  const isFuture = givenDate >= currentDate;\n\n  console.log('Result:', isFuture ? 'Future date' : 'Past date');\n\n  return isFuture;\n}\n\nfunction buttonDisabled(opt) {\n  if (opt) {\n    buttonStart.setAttribute('disabled', true);\n  } else {\n    buttonStart.removeAttribute('disabled');\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["$84b9dae4df53835d$var$inputDate","document","getElementById","$84b9dae4df53835d$var$buttonStart","querySelector","flatpickr","$84b9dae4df53835d$var$buttonDisabled","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","console","log","dateValue","date","currentDate","isFuture","$84b9dae4df53835d$var$isFutureDate","alert","opt","setAttribute","removeAttribute","$84b9dae4df53835d$var$convertMs","ms","minute","second","hour","day","days","Math","floor","hours","minutes","seconds","addEventListener","ticker","value","getTime","now","setInterval"],"version":3,"file":"02-timer.f378c0f2.js.map"}