{"mappings":"AAAA,MAAMA,EAAYC,SAASC,eAAe,mBACpCC,EAAcF,SAASG,cAAc,sBACrCC,EAAmBJ,SAASK,uBAAuB,SACzDC,GAAe,GAWf,MAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EAQjBC,QAAS,SAAUC,GAEjBC,QAAQC,IAAI,oBAAqBF,EAAc,IAG/C,MAAMG,EAAYH,EAAc,GAMhC,GAHAC,QAAQC,IAAI,kBAAmBC,IA0EnC,SAAsBC,GACpBH,QAAQC,IAAI,+CACZD,QAAQC,IAAI,gBAAiB,IAAIL,MACjCI,QAAQC,IAAI,cAAe,IAAIL,KAAKO,IAEpC,MAAMC,EAAc,IAAIR,KAIlBS,EAHY,IAAIT,KAAKO,IAGGC,EAI9B,OAFAJ,QAAQC,IAAI,UAAWI,EAAW,cAAgB,aAE3CA,C,CApFAC,CAAaJ,GAOhB,OALAF,QAAQC,IAAI,wCAGZM,MAAM,sCAMRP,QAAQC,IAAI,+BAEZV,GAAe,E,GAKnBiB,UAAU,mBAAoBhB,GAI9B,IAAIiB,EAAa,KAiEjB,SAASlB,EAAemB,GAClBA,EACFvB,EAAYwB,aAAa,YAAY,GAErCxB,EAAYyB,gBAAgB,W,CAIhC,SAASC,EAAUC,GAEjB,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,C,KARME,KAAKC,MAAMN,EAAKI,G,MAEfC,KAAKC,MAAMN,EAAMI,EAAOD,G,QAEtBE,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,G,QAEjCI,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAZnC,K,CA1EjB5B,EAAYkC,iBAAiB,SAAS,KACpCrB,QAAQC,IAAI,oCACRQ,GACFT,QAAQC,IAAI,2CACZqB,cAAcb,GACdT,QAAQC,IAAI,sBACZQ,EAAa,KACbT,QAAQC,IAAI,2BAEZD,QAAQC,IAAI,uBAIMhB,SAASG,cAAc,mBAG3C,IAAImC,EAFiB,IAAI3B,KAAKZ,EAAUwC,OAAOC,UACzB7B,KAAK8B,MAG3BjB,EAAakB,aAAY,KACvBJ,GAAU,IACV,MAAMK,EAAYf,EAAUU,GAC5BvB,QAAQC,IAAIsB,GACZvB,QAAQC,IAAI,YAAaY,EAAUU,IAGnClC,EAAiB,GAAGwC,YAAcD,EAAUE,KAC5CzC,EAAiB,GAAGwC,YAAcD,EAAUG,MAC5C1C,EAAiB,GAAGwC,YAAcD,EAAUI,QAC5C3C,EAAiB,GAAGwC,YAAcD,EAAUK,QAExCV,GAAU,GACZvB,QAAQC,IAAI,uCACZqB,cAAcb,GACdA,EAAa,MAEbT,QAAQC,IAAI,yCAAyC,GAEtD,IAAK","sources":["src/js/02-timer.js"],"sourcesContent":["const inputDate = document.getElementById('datetime-picker');\nconst buttonStart = document.querySelector('button[data-start]');\nconst spanElementValue = document.getElementsByClassName('value');\nbuttonDisabled(true);\n\n// Notiflix.Confirm.init({\n//   width: '320px',\n//   messageMaxLength: 1923,\n//   plainText: true,\n// });\n\n//Notiflix.Notify.warning('Memento te hominem esse');\n\n// Set up options for the flatpickr date picker\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  /**\n   * Callback function for when the date picker is closed.\n   * It checks if the selected date is in the future.\n   * If not, it displays an alert and prevents the button from being enabled.\n   **/\n\n  onClose: function (selectedDates) {\n    // Log the first selected date\n    console.log('selectedDates[0]:', selectedDates[0]);\n\n    // Get the input date value\n    const dateValue = selectedDates[0];\n\n    // Log the input date value\n    console.log('inputDateValue:', dateValue);\n\n    // Check if the input date is in the future\n    if (!isFutureDate(dateValue)) {\n      // Log that the input date is not in the future\n      console.log('Input date is not in the future');\n      // Display an alert to the user\n\n      alert('Please choose a date in the future');\n      // Prevent the button from being enabled\n      return;\n    }\n\n    // Log that the input date is in the future\n    console.log('Input date is in the future');\n    // Enable the button\n    buttonDisabled(false);\n  },\n};\n\n// Initialize the flatpickr date picker\nflatpickr('#datetime-picker', options);\n\n// event listeners\n\nlet intervalId = null;\nbuttonStart.addEventListener('click', () => {\n  console.log('Checking if intervalId is truthy');\n  if (intervalId) {\n    console.log('intervalId is truthy, clearing interval');\n    clearInterval(intervalId);\n    console.log('intervalId cleared');\n    intervalId = null;\n    console.log('intervalId set to null');\n  } else {\n    console.log('intervalId is falsy');\n  }\n  // Convert the input value to a Date object\n\n  const spanElement = document.querySelector('span[data-days]');\n  const futureDateMs = new Date(inputDate.value).getTime();\n  const currentDateMs = Date.now();\n  let ticker = futureDateMs - currentDateMs;\n\n  intervalId = setInterval(() => {\n    ticker -= 1000;\n    const timeParts = convertMs(ticker);\n    console.log(ticker);\n    console.log('tickerId:', convertMs(ticker));\n\n    // Update the span elements with the time parts\n    spanElementValue[0].textContent = timeParts.days;\n    spanElementValue[1].textContent = timeParts.hours;\n    spanElementValue[2].textContent = timeParts.minutes;\n    spanElementValue[3].textContent = timeParts.seconds;\n    // Check condition to end the interval\n    if (ticker <= 0) {\n      console.log('ticker is <= 0, ending the interval');\n      clearInterval(intervalId); // End the interval\n      intervalId = null;\n    } else {\n      console.log('ticker is > 0, continuing the interval');\n    }\n  }, 1000);\n});\n\n// functions\n\n// function intervalId(ms) {\n//   setInterval(() => {\n//     const convert = convertMs(ms);\n//   }, 1000);\n// }\n\nfunction isFutureDate(date) {\n  console.log('Checking if the given date is in the future');\n  console.log('Current date:', new Date());\n  console.log('Given date:', new Date(date));\n\n  const currentDate = new Date();\n  const givenDate = new Date(date);\n\n  // Compare the given date with the current date\n  const isFuture = givenDate >= currentDate;\n\n  console.log('Result:', isFuture ? 'Future date' : 'Past date');\n\n  return isFuture;\n}\n\nfunction buttonDisabled(opt) {\n  if (opt) {\n    buttonStart.setAttribute('disabled', true);\n  } else {\n    buttonStart.removeAttribute('disabled');\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["$40d383fb392a7037$var$inputDate","document","getElementById","$40d383fb392a7037$var$buttonStart","querySelector","$40d383fb392a7037$var$spanElementValue","getElementsByClassName","$40d383fb392a7037$var$buttonDisabled","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","console","log","dateValue","date","currentDate","isFuture","$40d383fb392a7037$var$isFutureDate","alert","flatpickr","$40d383fb392a7037$var$intervalId","opt","setAttribute","removeAttribute","$40d383fb392a7037$var$convertMs","ms","minute","second","hour","day","Math","floor","addEventListener","clearInterval","ticker","value","getTime","now","setInterval","timeParts","textContent","days","hours","minutes","seconds"],"version":3,"file":"02-timer.45876df2.js.map"}